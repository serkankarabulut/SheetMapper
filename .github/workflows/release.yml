name: Release to Maven Central

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          # Remove -SNAPSHOT if exists
          CURRENT_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          echo "Selected version type: $VERSION_TYPE"
          
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION ($VERSION_TYPE)"

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next_version }} -DgenerateBackupPoms=false

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Deploy to Maven Central
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn clean deploy -Dgpg.passphrase="${GPG_PASSPHRASE}" --batch-mode --no-transfer-progress

      - name: Commit version update
        run: |
          git add pom.xml
          git commit -m "Release version ${{ steps.next_version.outputs.next_version }}"
          git tag -a "v${{ steps.next_version.outputs.next_version }}" -m "Release version ${{ steps.next_version.outputs.next_version }}"

      - name: Update to next SNAPSHOT version
        run: |
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$NEXT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          SNAPSHOT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
          mvn versions:set -DnewVersion=$SNAPSHOT_VERSION -DgenerateBackupPoms=false
          git add pom.xml
          git commit -m "Prepare for next development iteration: $SNAPSHOT_VERSION"

      - name: Push changes
        run: |
          git push origin master
          git push origin "v${{ steps.next_version.outputs.next_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: "v${{ steps.next_version.outputs.next_version }}"
          release_name: "Release v${{ steps.next_version.outputs.next_version }}"
          body: |
            **Release version ${{ steps.next_version.outputs.next_version }}**
            
            Version Type: **${{ steps.next_version.outputs.version_type }}**
            
            **Maven Dependency:**
            ```xml
            <dependency>
                <groupId>io.github.serkankarabulut</groupId>
                <artifactId>sheetmapper</artifactId>
                <version>${{ steps.next_version.outputs.next_version }}</version>
            </dependency>
            ```
            
            **Gradle Dependency:**
            ```gradle
            implementation 'io.github.serkankarabulut:sheetmapper:${{ steps.next_version.outputs.next_version }}'
            ```
          draft: false
          prerelease: false